digraph FcmEgressParser {
subgraph clusterFcmEgressParser {
graph [
fontsize="22pt", label=FcmEgressParser, style=bold];
0[label="start
(hdr.ethernet.ether_type)", margin="", shape=rectangle, style=solid];
1[label="parse_ipv4
(hdr.ipv4.protocol)", margin="", shape=rectangle, style=solid];
2[label="parse_tcp
(hdr.ipv4.total_len)", margin="", shape=rectangle, style=solid];
3[label="parse_udp
(hdr.udp.dst_port)", margin="", shape=rectangle, style=solid];
4[label=accept, margin="", shape=rectangle, style=solid];
5[label=reject, margin="", shape=rectangle, style=solid];
6[label="min_parse_depth_accept_initial
((bit<1>)min_parse_depth_counter_0/min_parse_depth_counter.is_negative(), (bit<1>)min_parse_depth_counter_0/min_parse_depth_counter.is_zero())", margin="", shape=rectangle, style=solid];
7[label="min_parse_depth_accept_loop
((bit<1>)min_parse_depth_counter_0/min_parse_depth_counter.is_negative(), (bit<1>)min_parse_depth_counter_0/min_parse_depth_counter.is_zero())", margin="", shape=rectangle, style=solid];
8[label="min_parse_depth_reject_initial
((bit<1>)min_parse_depth_counter_0/min_parse_depth_counter.is_negative(), (bit<1>)min_parse_depth_counter_0/min_parse_depth_counter.is_zero())", margin="", shape=rectangle, style=solid];
9[label="min_parse_depth_reject_loop
((bit<1>)min_parse_depth_counter_0/min_parse_depth_counter.is_negative(), (bit<1>)min_parse_depth_counter_0/min_parse_depth_counter.is_zero())", margin="", shape=rectangle, style=solid];
0 -> 1[label="16w0x800"];
0 -> 8[label=default];
1 -> 2[label="8w6"];
1 -> 3[label="8w17"];
1 -> 6[label=default];
2 -> 4[label=default];
3 -> 4[label=default];
6 -> 7[label="(1w0, 1w0)"];
6 -> 4[label="(default, default)"];
6 -> 5[label=fallthrough];
7 -> 7[label="(1w0, 1w0)"];
7 -> 4[label="(default, default)"];
7 -> 5[label=fallthrough];
8 -> 9[label="(1w0, 1w0)"];
8 -> 5[label="(default, default)"];
8 -> 5[label=fallthrough];
9 -> 9[label="(1w0, 1w0)"];
9 -> 5[label="(default, default)"];
9 -> 5[label=fallthrough];
}
}
