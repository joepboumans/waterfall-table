version:
  version: 1.0.1
  run_id: "d396d9b5eb7244ad"
  target: Tofino
phv ingress:
  ig_intr_md.resubmit_flag: {  stage 0..7: H0(15) } 
  ig_intr_md.ingress_port: {  stage 0..2: H0(0..8) } 
  hdr.ethernet.dst_addr.0-7: TB0
  hdr.ethernet.dst_addr.8-15: TB1
  hdr.ethernet.dst_addr.16-23: TB2
  hdr.ethernet.dst_addr.24-31: TB3
  hdr.ethernet.dst_addr.32-47: TH8
  hdr.ethernet.src_addr.0-15: TH4
  hdr.ethernet.src_addr.16-31: TH5
  hdr.ethernet.src_addr.32-47: TH7
  hdr.ethernet.ether_type: TH6
  hdr.ipv4.version: TW0(28..31)
  hdr.ipv4.ihl: TW0(24..27)
  hdr.ipv4.diffserv: TW0(16..23)
  hdr.ipv4.total_len: TW0(0..15)
  hdr.ipv4.identification: TW3(16..31)
  hdr.ipv4.flags: TW3(13..15)
  hdr.ipv4.frag_offset: TW3(0..12)
  hdr.ipv4.ttl: TW2(24..31)
  hdr.ipv4.protocol: TW2(16..23)
  hdr.ipv4.hdr_checksum: TW2(0..15)
  hdr.ipv4.src_addr.0-15: H3
  hdr.ipv4.src_addr.16-31: H5
  hdr.ipv4.dst_addr: TW4
  hdr.udp.src_port: TH1
  hdr.udp.dst_port: TH0
  hdr.udp.hdr_length: TW1(16..31)
  hdr.udp.checksum: TW1(0..15)
  hdr.tcp.src_port: TH3
  hdr.tcp.dst_port: TH2
  hdr.tcp.seq_no: TW6
  hdr.tcp.ack_no: TW5
  hdr.tcp.data_offset: TW1(28..31)
  hdr.tcp.res: TW1(24..27)
  hdr.tcp.flags: TW1(16..23)
  hdr.tcp.window: TW1(0..15)
  hdr.tcp.checksum: TH1
  hdr.tcp.urgent_ptr: TH0
  ig_md.resubmit_md.type: {  stage 8..12: B5 } 
  ig_md.resubmit_md.remain_hi: {  stage 8..12: H7 } 
  ig_md.resubmit_md.remain_lo: {  stage 8..12: H4 } 
  ig_md.found_hi: {  stage 1..7: H0(9..12) } 
  ig_md.found_lo: {  stage 1..7: B4(1..4) } 
  ig_md.remain1_hi: {  stage 1..2: H6 } 
  ig_md.remain1_lo: {  stage 1..2: H2 } 
  ig_md.remain2_hi: {  stage 3..4: H7 } 
  ig_md.remain2_lo: {  stage 2..4: H4 } 
  ig_md.remain3_hi: {  stage 4..6: H6 } 
  ig_md.remain3_lo: {  stage 5..6: H2 } 
  ig_intr_md_for_dprsr.digest_type: {  stage 8..12: B2(0..2) } 
  ig_intr_md_for_dprsr.resubmit_type: {  stage 8..12: B3(0..2) } 
  ig_intr_md_for_dprsr.mirror_type: {  stage 12: B1(0..2) } 
  ig_intr_md_for_tm.ucast_egress_port: {  stage 3..12: H1(0..8) } 
  ig_intr_md_for_tm.bypass_egress: {  stage 3..12: B4(0) } 
  $tmp2: {  stage 12: H2(0..9) } 
  $tmp3.0-7: {  stage 12: B0 } 
  $tmp3.8-15: {  stage 12: B0 } 
  $tmp3.16-23: {  stage 12: B0 } 
  hdr.ethernet.$valid: B6(0)
  hdr.ipv4.$valid: B6(1)
  hdr.udp.$valid: B6(2)
  hdr.tcp.$valid: B6(3)
  context_json:
    B0:
    - { name : $tmp3, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : $tmp3, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : $tmp3, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    B1:
    - { name : ig_intr_md_for_dprsr.mirror_type, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    B2:
    - { name : ig_intr_md_for_dprsr.digest_type, live_start : 8, live_end : deparser, mutually_exclusive_with: [  ] }
    B3:
    - { name : ig_intr_md_for_dprsr.resubmit_type, live_start : 8, live_end : deparser, mutually_exclusive_with: [  ] }
    B4:
    - { name : ig_md.found_lo, live_start : 1, live_end : 7, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md_for_tm.bypass_egress, live_start : 3, live_end : deparser, mutually_exclusive_with: [  ] }
    B5:
    - { name : ig_md.resubmit_md.type, live_start : 8, live_end : deparser, mutually_exclusive_with: [  ] }
    B6:
    - { name : hdr.ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.ipv4.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.udp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : hdr.tcp.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H0:
    - { name : ig_intr_md.resubmit_flag, live_start : parser, live_end : 7, mutually_exclusive_with: [  ] }
    - { name : ig_intr_md.ingress_port, live_start : parser, live_end : 2, mutually_exclusive_with: [  ] }
    - { name : ig_md.found_hi, live_start : 1, live_end : 7, mutually_exclusive_with: [  ] }
    H1:
    - { name : ig_intr_md_for_tm.ucast_egress_port, live_start : 3, live_end : deparser, mutually_exclusive_with: [  ] }
    H2:
    - { name : ig_md.remain1_lo, live_start : 1, live_end : 2, mutually_exclusive_with: [  ] }
    - { name : ig_md.remain3_lo, live_start : 5, live_end : 6, mutually_exclusive_with: [  ] }
    - { name : $tmp2, live_start : deparser, live_end : deparser, mutually_exclusive_with: [  ] }
    H3:
    - { name : hdr.ipv4.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H4:
    - { name : ig_md.resubmit_md.remain_lo, live_start : 8, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.remain2_lo, live_start : 2, live_end : 4, mutually_exclusive_with: [  ] }
    H5:
    - { name : hdr.ipv4.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H6:
    - { name : ig_md.remain1_hi, live_start : 1, live_end : 2, mutually_exclusive_with: [  ] }
    - { name : ig_md.remain3_hi, live_start : 4, live_end : 6, mutually_exclusive_with: [  ] }
    H7:
    - { name : ig_md.resubmit_md.remain_hi, live_start : 8, live_end : deparser, mutually_exclusive_with: [  ] }
    - { name : ig_md.remain2_hi, live_start : 3, live_end : 4, mutually_exclusive_with: [  ] }
phv egress:
  context_json:
parser ingress:
  start: $entry_point
  init_zero: [ B4, H6, H2, B1, B0, B6, B0 ]
  bitwise_or: [ B6 ]
  hdr_len_adj: 16
  states:
    $entry_point:
      *:
        load: { byte1 : 0 }
        buf_req: 1
        next: start
    start:
      match: [ byte1 ]
      0b0*******:
        0..1: H0
            # - bit[0] -> H0 bit[15]: ingress::ig_intr_md.resubmit_flag
            # - bit[7..15] -> H0 bit[8..0]: ingress::ig_intr_md.ingress_port
        shift: 16
        buf_req: 16
        next: parse_ethernet
      0b1*******:
        0..1: H0
            # - bit[0] -> H0 bit[15]: ingress::ig_intr_md.resubmit_flag
            # - bit[7..15] -> H0 bit[8..0]: ingress::ig_intr_md.ingress_port
        shift: 16
        buf_req: 16
        next: parse_ethernet
    parse_ethernet:
      *:
        0..1: TH8  # ingress::hdr.ethernet.dst_addr[47:32].32-47
        2: TB3  # ingress::hdr.ethernet.dst_addr[31:24].24-31
        3: TB2  # ingress::hdr.ethernet.dst_addr[23:16].16-23
        4: TB1  # ingress::hdr.ethernet.dst_addr[15:8].8-15
        5: TB0  # ingress::hdr.ethernet.dst_addr[7:0].0-7
        6..7: TH7  # ingress::hdr.ethernet.src_addr[47:32].32-47
        8..9: TH5  # ingress::hdr.ethernet.src_addr[31:16].16-31
        10..11: TH4  # ingress::hdr.ethernet.src_addr[15:0].0-15
        load: { half : 12..13 }
        shift: 12
        buf_req: 14
        next: parse_ethernet.$split_0
    parse_ethernet.$split_0:
      match: [ half ]
      0x0800:
        0..1: TH6  # ingress::hdr.ethernet.ether_type
        B6: 1  # value 1 -> B6 bit[0]: ingress::hdr.ethernet.$valid
        load: { byte1 : 11 }
        shift: 2
        buf_req: 12
        next: parse_ipv4
      0x****:
        0..1: TH6  # ingress::hdr.ethernet.ether_type
        B6: 1  # value 1 -> B6 bit[0]: ingress::hdr.ethernet.$valid
        shift: 2
        buf_req: 2
        next: end
    parse_ipv4:
      match: [ byte1 ]
      0x11:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ipv4.version
            # - bit[4..7] -> TW0 bit[27..24]: ingress::hdr.ipv4.ihl
            # - bit[8..15] -> TW0 bit[23..16]: ingress::hdr.ipv4.diffserv
            # - bit[16..31] -> TW0 bit[15..0]: ingress::hdr.ipv4.total_len
        4..7: TW3
            # - bit[32..47] -> TW3 bit[31..16]: ingress::hdr.ipv4.identification
            # - bit[48..50] -> TW3 bit[15..13]: ingress::hdr.ipv4.flags
            # - bit[51..63] -> TW3 bit[12..0]: ingress::hdr.ipv4.frag_offset
        8..11: TW2
            # - bit[64..71] -> TW2 bit[31..24]: ingress::hdr.ipv4.ttl
            # - bit[72..79] -> TW2 bit[23..16]: ingress::hdr.ipv4.protocol
            # - bit[80..95] -> TW2 bit[15..0]: ingress::hdr.ipv4.hdr_checksum
        12..13: H5  # ingress::hdr.ipv4.src_addr[31:16].16-31
        14..15: H3  # ingress::hdr.ipv4.src_addr[15:0].0-15
        16..19: TW4  # ingress::hdr.ipv4.dst_addr
        B6: 2  # value 1 -> B6 bit[1]: ingress::hdr.ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_udp
      0x06:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ipv4.version
            # - bit[4..7] -> TW0 bit[27..24]: ingress::hdr.ipv4.ihl
            # - bit[8..15] -> TW0 bit[23..16]: ingress::hdr.ipv4.diffserv
            # - bit[16..31] -> TW0 bit[15..0]: ingress::hdr.ipv4.total_len
        4..7: TW3
            # - bit[32..47] -> TW3 bit[31..16]: ingress::hdr.ipv4.identification
            # - bit[48..50] -> TW3 bit[15..13]: ingress::hdr.ipv4.flags
            # - bit[51..63] -> TW3 bit[12..0]: ingress::hdr.ipv4.frag_offset
        8..11: TW2
            # - bit[64..71] -> TW2 bit[31..24]: ingress::hdr.ipv4.ttl
            # - bit[72..79] -> TW2 bit[23..16]: ingress::hdr.ipv4.protocol
            # - bit[80..95] -> TW2 bit[15..0]: ingress::hdr.ipv4.hdr_checksum
        12..13: H5  # ingress::hdr.ipv4.src_addr[31:16].16-31
        14..15: H3  # ingress::hdr.ipv4.src_addr[15:0].0-15
        16..19: TW4  # ingress::hdr.ipv4.dst_addr
        B6: 2  # value 1 -> B6 bit[1]: ingress::hdr.ipv4.$valid
        shift: 20
        buf_req: 20
        next: parse_tcp
      0x**:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ipv4.version
            # - bit[4..7] -> TW0 bit[27..24]: ingress::hdr.ipv4.ihl
            # - bit[8..15] -> TW0 bit[23..16]: ingress::hdr.ipv4.diffserv
            # - bit[16..31] -> TW0 bit[15..0]: ingress::hdr.ipv4.total_len
        4..7: TW3
            # - bit[32..47] -> TW3 bit[31..16]: ingress::hdr.ipv4.identification
            # - bit[48..50] -> TW3 bit[15..13]: ingress::hdr.ipv4.flags
            # - bit[51..63] -> TW3 bit[12..0]: ingress::hdr.ipv4.frag_offset
        8..11: TW2
            # - bit[64..71] -> TW2 bit[31..24]: ingress::hdr.ipv4.ttl
            # - bit[72..79] -> TW2 bit[23..16]: ingress::hdr.ipv4.protocol
            # - bit[80..95] -> TW2 bit[15..0]: ingress::hdr.ipv4.hdr_checksum
        12..13: H5  # ingress::hdr.ipv4.src_addr[31:16].16-31
        14..15: H3  # ingress::hdr.ipv4.src_addr[15:0].0-15
        16..19: TW4  # ingress::hdr.ipv4.dst_addr
        B6: 2  # value 1 -> B6 bit[1]: ingress::hdr.ipv4.$valid
        shift: 20
        buf_req: 20
        next: end
    parse_udp:
      *:
        0..1: TH1  # ingress::hdr.udp.src_port
        2..3: TH0  # ingress::hdr.udp.dst_port
        4..7: TW1
            # - bit[32..47] -> TW1 bit[31..16]: ingress::hdr.udp.hdr_length
            # - bit[48..63] -> TW1 bit[15..0]: ingress::hdr.udp.checksum
        B6: 4  # value 1 -> B6 bit[2]: ingress::hdr.udp.$valid
        shift: 8
        buf_req: 8
        next: end
    parse_tcp:
      *:
        0..1: TH3  # ingress::hdr.tcp.src_port
        2..3: TH2  # ingress::hdr.tcp.dst_port
        4..7: TW6  # ingress::hdr.tcp.seq_no
        8..11: TW5  # ingress::hdr.tcp.ack_no
        12..15: TW1
            # - bit[96..99] -> TW1 bit[31..28]: ingress::hdr.tcp.data_offset
            # - bit[100..103] -> TW1 bit[27..24]: ingress::hdr.tcp.res
            # - bit[104..111] -> TW1 bit[23..16]: ingress::hdr.tcp.flags
            # - bit[112..127] -> TW1 bit[15..0]: ingress::hdr.tcp.window
        16..17: TH1  # ingress::hdr.tcp.checksum
        18..19: TH0  # ingress::hdr.tcp.urgent_ptr
        B6: 8  # value 1 -> B6 bit[3]: ingress::hdr.tcp.$valid
        shift: 20
        buf_req: 20
        next: end
deparser ingress:
  dictionary:
    TH8: B6(0)  # ingress::hdr.ethernet.dst_addr.32-47 if ingress::hdr.ethernet.$valid
    TB3: B6(0)  # ingress::hdr.ethernet.dst_addr.24-31 if ingress::hdr.ethernet.$valid
    TB2: B6(0)  # ingress::hdr.ethernet.dst_addr.16-23 if ingress::hdr.ethernet.$valid
    TB1: B6(0)  # ingress::hdr.ethernet.dst_addr.8-15 if ingress::hdr.ethernet.$valid
    TB0: B6(0)  # ingress::hdr.ethernet.dst_addr.0-7 if ingress::hdr.ethernet.$valid
    TH7: B6(0)  # ingress::hdr.ethernet.src_addr.32-47 if ingress::hdr.ethernet.$valid
    TH5: B6(0)  # ingress::hdr.ethernet.src_addr.16-31 if ingress::hdr.ethernet.$valid
    TH4: B6(0)  # ingress::hdr.ethernet.src_addr.0-15 if ingress::hdr.ethernet.$valid
    TH6: B6(0)  # ingress::hdr.ethernet.ether_type if ingress::hdr.ethernet.$valid
    TW0: B6(1)
        # - bit[31..28]: ingress::hdr.ipv4.version if ingress::hdr.ipv4.$valid
        # - bit[27..24]: ingress::hdr.ipv4.ihl if ingress::hdr.ipv4.$valid
        # - bit[23..16]: ingress::hdr.ipv4.diffserv if ingress::hdr.ipv4.$valid
        # - bit[15..0]: ingress::hdr.ipv4.total_len if ingress::hdr.ipv4.$valid
    TW3: B6(1)
        # - bit[31..16]: ingress::hdr.ipv4.identification if ingress::hdr.ipv4.$valid
        # - bit[15..13]: ingress::hdr.ipv4.flags if ingress::hdr.ipv4.$valid
        # - bit[12..0]: ingress::hdr.ipv4.frag_offset if ingress::hdr.ipv4.$valid
    TW2: B6(1)
        # - bit[31..24]: ingress::hdr.ipv4.ttl if ingress::hdr.ipv4.$valid
        # - bit[23..16]: ingress::hdr.ipv4.protocol if ingress::hdr.ipv4.$valid
        # - bit[15..0]: ingress::hdr.ipv4.hdr_checksum if ingress::hdr.ipv4.$valid
    H5: B6(1)  # ingress::hdr.ipv4.src_addr.16-31 if ingress::hdr.ipv4.$valid
    H3: B6(1)  # ingress::hdr.ipv4.src_addr.0-15 if ingress::hdr.ipv4.$valid
    TW4: B6(1)  # ingress::hdr.ipv4.dst_addr if ingress::hdr.ipv4.$valid
    TH3: B6(3)  # ingress::hdr.tcp.src_port if ingress::hdr.tcp.$valid
    TH2: B6(3)  # ingress::hdr.tcp.dst_port if ingress::hdr.tcp.$valid
    TW6: B6(3)  # ingress::hdr.tcp.seq_no if ingress::hdr.tcp.$valid
    TW5: B6(3)  # ingress::hdr.tcp.ack_no if ingress::hdr.tcp.$valid
    TW1: B6(3)
        # - bit[31..28]: ingress::hdr.tcp.data_offset if ingress::hdr.tcp.$valid
        # - bit[27..24]: ingress::hdr.tcp.res if ingress::hdr.tcp.$valid
        # - bit[23..16]: ingress::hdr.tcp.flags if ingress::hdr.tcp.$valid
        # - bit[15..0]: ingress::hdr.tcp.window if ingress::hdr.tcp.$valid
    TH1: B6(3)  # ingress::hdr.tcp.checksum if ingress::hdr.tcp.$valid
    TH0: B6(3)  # ingress::hdr.tcp.urgent_ptr if ingress::hdr.tcp.$valid
    TH1: B6(2)  # ingress::hdr.udp.src_port if ingress::hdr.udp.$valid
    TH0: B6(2)  # ingress::hdr.udp.dst_port if ingress::hdr.udp.$valid
    TW1: B6(2)
        # - bit[31..16]: ingress::hdr.udp.hdr_length if ingress::hdr.udp.$valid
        # - bit[15..0]: ingress::hdr.udp.checksum if ingress::hdr.udp.$valid
  egress_unicast_port: H1(0..8)  # bit[8..0]: ingress::ig_intr_md_for_tm.ucast_egress_port
  bypss_egr: B4(0..0)  # bit[0]: ingress::ig_intr_md_for_tm.bypass_egress
  learning:
    select: B2(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.digest_type
    5:
      - B2(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.digest_type
      - H5  # ingress::hdr.ipv4.src_addr.16-31
      - H3  # ingress::hdr.ipv4.src_addr.0-15
    context_json:
      5:
        - [ hdr.ipv4.src_addr, 1, 16, 7, 16]
        - [ hdr.ipv4.src_addr, 3, 16, 7, 0]
      name: [ WaterfallIngressDeparser.digest ]
  mirror:
    select: B1(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.mirror_type
    0:
      - H2(0..9)  # bit[9..0]: ingress::$tmp2
  resubmit:
    select: B3(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.resubmit_type
    3:
      - B5  # ingress::ig_md.resubmit_md.type
      - H7  # ingress::ig_md.resubmit_md.remain_hi
      - H4  # ingress::ig_md.resubmit_md.remain_lo
      - B0  # ingress::$tmp3.16-23
      - B0  # ingress::$tmp3.8-15
      - B0  # ingress::$tmp3.0-7
parser egress:
  start: $entry_point.start
  hdr_len_adj: 0
  meta_opt: 0
  states:
    $entry_point.start:
      *:
        buf_req: 0
        next: end
deparser egress:
  dictionary: {}
stage 0 ingress:
  phase0_match WaterfallIngressParser.$PORT_METADATA:
    p4:
      name: WaterfallIngressParser.$PORT_METADATA
      size: 288
      preferred_match_type: exact
      match_type: exact
    size: 288
    p4_param_order:
      ig_intr_md.ingress_port: { type: exact, size: 9 }
    format: {f1: 32..63, f2: 0..31}
    constant_value: 0
    actions:
      set_port_metadata:
      - handle: 0x20000000
      - p4_param_order: { f1: 32, f2: 32 } 
  exact_match swap1_lo_0 0:
    p4: { name: WaterfallIngress.swap1_lo, size: 512 }
    p4_param_order: 
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - { group: 0, index: 0..9, select: 40..51 & 0x0, rams: [[7, 2]] }
    hash_dist:
      0: { hash: 1, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 15: ig_intr_md.resubmit_flag }
      hash 0:
        0: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
      exact group 0: { 64: hdr.ipv4.src_addr.0-15, 80: hdr.ipv4.src_addr.16-31 }
      hash 1:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 32, { 0: hdr.ipv4.src_addr.0-15, 16: hdr.ipv4.src_addr.16-31 }, { })), 0..15)
      hash group 1:
        table: [1]
        seed: 0xdf1c
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 4..19, meter_pfe(0): 20..20, meter_type(0): 21..23, action(1): 2..3, version(1): 116..119, meter_addr(1): 24..39, meter_pfe(1): 40..40, meter_type(1): 41..43 }
    match_group_map: [ [ 0, 1 ] ]
    hit: [  swap1_hi_0 ]
    miss:  swap1_hi_0
    action_bus: { 0 : swap1_lo_0$salu.WaterfallIngress.table_1_lo(0..7), 32..33 : swap1_lo_0$salu.WaterfallIngress.table_1_lo(0..15) }
    stateful: swap1_lo_0$salu.WaterfallIngress.table_1_lo(hash_dist 0, meter_pfe, meter_type)
    instruction: swap1_lo_0(action, $DEFAULT)
    actions:
      WaterfallIngress.do_swap1_lo(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000004
      - next_table: 0
      - set H2(0..15), swap1_lo_0$salu.WaterfallIngress.table_1_lo
      - swap1_lo_0$salu.WaterfallIngress.table_1_lo(table_1_lo_swap_0, $hash_dist)
      WaterfallIngress.lookup1_lo(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000005
      - next_table: 0
      - set ig_md.remain1_lo, hdr.ipv4.src_addr.0-15
      - set B4(1..4), swap1_lo_0$salu.WaterfallIngress.table_1_lo
      - swap1_lo_0$salu.WaterfallIngress.table_1_lo(table_1_lo_lookup_0, $hash_dist)
      WaterfallIngress.no_action(2, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000006
      - next_table: 0
    default_action: WaterfallIngress.no_action
  stateful swap1_lo_0$salu.WaterfallIngress.table_1_lo:
    p4: { name: WaterfallIngress.table_1_lo, size: 65536 }
    row: [ 15, 13 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 15
    input_xbar:
      exact group 0: { 64: hdr.ipv4.src_addr.0-15 }
    data_bytemask: 3
    format: { lo: 16 }
    actions:
      table_1_lo_swap_0:
      - alu_a lo, phv_lo
      - output mem_lo
      table_1_lo_lookup_0:
      - equ lo, phv_lo, -lo
      - alu_a cmplo, hi, 1
      - output cmplo, alu_hi
  exact_match swap1_hi_0 1:
    p4: { name: WaterfallIngress.swap1_hi, size: 512 }
    p4_param_order: 
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
    row: 7
    bus: 1
    column: 3
    stash: 
      row: [ 7 ]
      col: [ 3 ]
      unit: [ 1 ]
    ways:
      - { group: 0, index: 10..19, select: 40..51 & 0x0, rams: [[7, 3]] }
    hash_dist:
      1: { hash: 1, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 15: ig_intr_md.resubmit_flag }
      hash 0:
        10: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
      exact group 0: { 64: hdr.ipv4.src_addr.0-15, 80: hdr.ipv4.src_addr.16-31 }
      hash 1:
        16..31: slice(stripe(crc_rev(0x82608edb, 0xffffffff, 0xffffffff, 32, { 0: hdr.ipv4.src_addr.0-15, 16: hdr.ipv4.src_addr.16-31 }, { })), 0..15)
      hash group 1:
        table: [1]
        seed: 0xdf1c0000
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 4..19, meter_pfe(0): 20..20, meter_type(0): 21..23, action(1): 2..3, version(1): 116..119, meter_addr(1): 24..39, meter_pfe(1): 40..40, meter_type(1): 41..43 }
    match_group_map: [ [ 0, 1 ] ]
    hit: [  swap2_lo_0 ]
    miss:  swap2_lo_0
    action_bus: { 36..37 : swap1_hi_0$salu.WaterfallIngress.table_1_hi(0..15) }
    stateful: swap1_hi_0$salu.WaterfallIngress.table_1_hi(hash_dist 1, meter_pfe, meter_type)
    instruction: swap1_hi_0(action, $DEFAULT)
    actions:
      WaterfallIngress.do_swap1_hi(0, 3):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000001
      - next_table: 0
      - set H6(0..15), swap1_hi_0$salu.WaterfallIngress.table_1_hi
      - swap1_hi_0$salu.WaterfallIngress.table_1_hi(table_1_hi_swap_0, $hash_dist)
      WaterfallIngress.lookup1_hi(1, 4):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000002
      - next_table: 0
      - set ig_md.remain1_hi, hdr.ipv4.src_addr.16-31
      - set H0(9..12), swap1_hi_0$salu.WaterfallIngress.table_1_hi
      - swap1_hi_0$salu.WaterfallIngress.table_1_hi(table_1_hi_lookup_0, $hash_dist)
      WaterfallIngress.no_action(2, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000003
      - next_table: 0
    default_action: WaterfallIngress.no_action
  stateful swap1_hi_0$salu.WaterfallIngress.table_1_hi:
    p4: { name: WaterfallIngress.table_1_hi, size: 65536 }
    row: [ 11, 9 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 11
    input_xbar:
      exact group 1: { 64: hdr.ipv4.src_addr.16-31 }
    data_bytemask: 3
    format: { lo: 16 }
    actions:
      table_1_hi_swap_0:
      - alu_a lo, phv_lo
      - output mem_lo
      table_1_hi_lookup_0:
      - equ lo, phv_lo, -lo
      - alu_a cmplo, hi, 1
      - output cmplo, alu_hi
stage 1 ingress:
  dependency: match
  exact_match swap2_lo_0 0:
    p4: { name: WaterfallIngress.swap2_lo, size: 512 }
    p4_param_order: 
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
      ig_md.found_hi: { type: exact, size: 4, full_size: 4 }
      ig_md.found_lo: { type: exact, size: 4, full_size: 4 }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - { group: 0, index: 0..9, select: 40..51 & 0x0, rams: [[7, 2]] }
    hash_dist:
      0: { hash: 1, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 1: ig_md.found_lo, 9: ig_md.found_hi, 15: ig_intr_md.resubmit_flag }
      hash 0:
        0..3: ig_md.found_lo
        4..7: ig_md.found_hi
        8: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
      exact group 0: { 64: ig_md.remain1_lo, 96: ig_md.remain1_hi }
      hash 1:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xfffffff0, 0xffffffff, 32, { 0: ig_md.remain1_lo, 16: ig_md.remain1_hi }, { })), 0..15)
      hash group 1:
        table: [1]
        seed: 0x2d00
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 4..19, meter_pfe(0): 20..20, meter_type(0): 21..23, action(1): 2..3, version(1): 116..119, meter_addr(1): 24..39, meter_pfe(1): 40..40, meter_type(1): 41..43 }
    match_group_map: [ [ 0, 1 ] ]
    hit: [  swap2_hi_0 ]
    miss:  swap2_hi_0
    action_bus: { 0 : swap2_lo_0$salu.WaterfallIngress.table_2_lo(0..7), 32..33 : swap2_lo_0$salu.WaterfallIngress.table_2_lo(0..15) }
    stateful: swap2_lo_0$salu.WaterfallIngress.table_2_lo(hash_dist 0, meter_pfe, meter_type)
    instruction: swap2_lo_0(action, $DEFAULT)
    actions:
      WaterfallIngress.do_swap2_lo(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000007
      - next_table: 0
      - set H4(0..15), swap2_lo_0$salu.WaterfallIngress.table_2_lo
      - swap2_lo_0$salu.WaterfallIngress.table_2_lo(table_2_lo_swap_0, $hash_dist)
      WaterfallIngress.lookup2_lo(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000008
      - next_table: 0
      - set ig_md.remain2_lo, hdr.ipv4.src_addr.0-15
      - set B4(1..4), swap2_lo_0$salu.WaterfallIngress.table_2_lo
      - swap2_lo_0$salu.WaterfallIngress.table_2_lo(table_2_lo_lookup_0, $hash_dist)
      WaterfallIngress.no_action(2, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000009
      - next_table: 0
    default_action: WaterfallIngress.no_action
  stateful swap2_lo_0$salu.WaterfallIngress.table_2_lo:
    p4: { name: WaterfallIngress.table_2_lo, size: 65536 }
    row: [ 15, 13 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 15
    input_xbar:
      exact group 0: { 64: ig_md.remain1_lo, 80: hdr.ipv4.src_addr.0-15 }
    data_bytemask: 15
    format: { lo: 16 }
    actions:
      table_2_lo_swap_0:
      - alu_a lo, phv_lo
      - output mem_lo
      table_2_lo_lookup_0:
      - equ lo, phv_hi, -lo
      - alu_a cmplo, hi, 2
      - output cmplo, alu_hi
stage 2 ingress:
  dependency: match
  exact_match swap2_hi_0 0:
    p4: { name: WaterfallIngress.swap2_hi, size: 512 }
    p4_param_order: 
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
      ig_md.found_hi: { type: exact, size: 4, full_size: 4 }
      ig_md.found_lo: { type: exact, size: 4, full_size: 4 }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - { group: 0, index: 0..9, select: 40..51 & 0x0, rams: [[7, 2]] }
    hash_dist:
      0: { hash: 1, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 1: ig_md.found_lo, 9: ig_md.found_hi, 15: ig_intr_md.resubmit_flag }
      hash 0:
        0..3: ig_md.found_lo
        4..7: ig_md.found_hi
        8: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
      exact group 0: { 64: ig_md.remain1_hi, 96: ig_md.remain1_lo }
      hash 1:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xfffffff0, 0xffffffff, 32, { 0: ig_md.remain1_lo, 16: ig_md.remain1_hi }, { })), 0..15)
      hash group 1:
        table: [1]
        seed: 0x2d00
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 4..19, meter_pfe(0): 20..20, meter_type(0): 21..23, action(1): 2..3, version(1): 116..119, meter_addr(1): 24..39, meter_pfe(1): 40..40, meter_type(1): 41..43 }
    match_group_map: [ [ 0, 1 ] ]
    hit: [  tbl_bypass_egress ]
    miss:  tbl_bypass_egress
    action_bus: { 32..33 : swap2_hi_0$salu.WaterfallIngress.table_2_hi(0..15) }
    stateful: swap2_hi_0$salu.WaterfallIngress.table_2_hi(hash_dist 0, meter_pfe, meter_type)
    instruction: swap2_hi_0(action, $DEFAULT)
    actions:
      WaterfallIngress.do_swap2_hi(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000a
      - next_table: 0
      - set H7(0..15), swap2_hi_0$salu.WaterfallIngress.table_2_hi
      - swap2_hi_0$salu.WaterfallIngress.table_2_hi(table_2_hi_swap_0, $hash_dist)
      WaterfallIngress.lookup2_hi(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000b
      - next_table: 0
      - set ig_md.remain2_hi, hdr.ipv4.src_addr.16-31
      - set H0(9..12), swap2_hi_0$salu.WaterfallIngress.table_2_hi
      - swap2_hi_0$salu.WaterfallIngress.table_2_hi(table_2_hi_lookup_0, $hash_dist)
      WaterfallIngress.no_action(2, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000c
      - next_table: 0
    default_action: WaterfallIngress.no_action
  stateful swap2_hi_0$salu.WaterfallIngress.table_2_hi:
    p4: { name: WaterfallIngress.table_2_hi, size: 65536 }
    row: [ 15, 13 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 15
    input_xbar:
      exact group 0: { 64: ig_md.remain1_hi, 80: hdr.ipv4.src_addr.16-31 }
    data_bytemask: 15
    format: { lo: 16 }
    actions:
      table_2_hi_swap_0:
      - alu_a lo, phv_lo
      - output mem_lo
      table_2_hi_lookup_0:
      - equ lo, phv_hi, -lo
      - alu_a cmplo, hi, 2
      - output cmplo, alu_hi
  ternary_match tbl_bypass_egress 1:
    p4: { name: tbl_bypass_egress, hidden: true }
    hit: [  swap3_hi_0 ]
    miss:  swap3_hi_0
    indirect: tbl_bypass_egress$tind
  ternary_indirect tbl_bypass_egress$tind:
    row: 0
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_bypass_egress$tind(action, $DEFAULT)
    actions:
      WaterfallIngress.bypass_egress(0, 3):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000001b
      - next_table: 0
      - set ig_intr_md_for_tm.ucast_egress_port, ig_intr_md.ingress_port
      - set ig_intr_md_for_tm.bypass_egress, 1
    default_action: WaterfallIngress.bypass_egress
stage 3 ingress:
  dependency: match
  exact_match swap3_hi_0 0:
    p4: { name: WaterfallIngress.swap3_hi, size: 512 }
    p4_param_order: 
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
      ig_md.found_hi: { type: exact, size: 4, full_size: 4 }
      ig_md.found_lo: { type: exact, size: 4, full_size: 4 }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - { group: 0, index: 0..9, select: 40..51 & 0x0, rams: [[7, 2]] }
    hash_dist:
      0: { hash: 1, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 1: ig_md.found_lo, 9: ig_md.found_hi, 15: ig_intr_md.resubmit_flag }
      hash 0:
        0..3: ig_md.found_lo
        4..7: ig_md.found_hi
        8: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
      exact group 0: { 64: ig_md.remain2_hi, 96: ig_md.remain2_lo }
      hash 1:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xffffff00, 0xffffffff, 32, { 0: ig_md.remain2_lo, 16: ig_md.remain2_hi }, { })), 0..15)
      hash group 1:
        table: [1]
        seed: 0x3091
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 4..19, meter_pfe(0): 20..20, meter_type(0): 21..23, action(1): 2..3, version(1): 116..119, meter_addr(1): 24..39, meter_pfe(1): 40..40, meter_type(1): 41..43 }
    match_group_map: [ [ 0, 1 ] ]
    hit: [  swap3_lo_0 ]
    miss:  swap3_lo_0
    action_bus: { 32..33 : swap3_hi_0$salu.WaterfallIngress.table_3_hi(0..15) }
    stateful: swap3_hi_0$salu.WaterfallIngress.table_3_hi(hash_dist 0, meter_pfe, meter_type)
    instruction: swap3_hi_0(action, $DEFAULT)
    actions:
      WaterfallIngress.do_swap3_hi(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000d
      - next_table: 0
      - set H6(0..15), swap3_hi_0$salu.WaterfallIngress.table_3_hi
      - swap3_hi_0$salu.WaterfallIngress.table_3_hi(table_3_hi_swap_0, $hash_dist)
      WaterfallIngress.lookup3_hi(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000e
      - next_table: 0
      - set ig_md.remain3_hi, hdr.ipv4.src_addr.16-31
      - set H0(9..12), swap3_hi_0$salu.WaterfallIngress.table_3_hi
      - swap3_hi_0$salu.WaterfallIngress.table_3_hi(table_3_hi_lookup_0, $hash_dist)
      WaterfallIngress.no_action(2, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000f
      - next_table: 0
    default_action: WaterfallIngress.no_action
  stateful swap3_hi_0$salu.WaterfallIngress.table_3_hi:
    p4: { name: WaterfallIngress.table_3_hi, size: 65536 }
    row: [ 15, 13 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 15
    input_xbar:
      exact group 0: { 64: ig_md.remain2_hi, 80: hdr.ipv4.src_addr.16-31 }
    data_bytemask: 15
    format: { lo: 16 }
    actions:
      table_3_hi_swap_0:
      - alu_a lo, phv_lo
      - output mem_lo
      table_3_hi_lookup_0:
      - equ lo, phv_hi, -lo
      - alu_a cmplo, hi, 3
      - output cmplo, alu_hi
stage 4 ingress:
  dependency: match
  exact_match swap3_lo_0 0:
    p4: { name: WaterfallIngress.swap3_lo, size: 512 }
    p4_param_order: 
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
      ig_md.found_hi: { type: exact, size: 4, full_size: 4 }
      ig_md.found_lo: { type: exact, size: 4, full_size: 4 }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - { group: 0, index: 0..9, select: 40..51 & 0x0, rams: [[7, 2]] }
    hash_dist:
      0: { hash: 1, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 1: ig_md.found_lo, 9: ig_md.found_hi, 15: ig_intr_md.resubmit_flag }
      hash 0:
        0..3: ig_md.found_lo
        4..7: ig_md.found_hi
        8: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
      exact group 0: { 64: ig_md.remain2_lo, 96: ig_md.remain2_hi }
      hash 1:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xffffff00, 0xffffffff, 32, { 0: ig_md.remain2_lo, 16: ig_md.remain2_hi }, { })), 0..15)
      hash group 1:
        table: [1]
        seed: 0x3091
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 4..19, meter_pfe(0): 20..20, meter_type(0): 21..23, action(1): 2..3, version(1): 116..119, meter_addr(1): 24..39, meter_pfe(1): 40..40, meter_type(1): 41..43 }
    match_group_map: [ [ 0, 1 ] ]
    hit: [  swap4_hi_0 ]
    miss:  swap4_hi_0
    action_bus: { 0 : swap3_lo_0$salu.WaterfallIngress.table_3_lo(0..7), 32..33 : swap3_lo_0$salu.WaterfallIngress.table_3_lo(0..15) }
    stateful: swap3_lo_0$salu.WaterfallIngress.table_3_lo(hash_dist 0, meter_pfe, meter_type)
    instruction: swap3_lo_0(action, $DEFAULT)
    actions:
      WaterfallIngress.do_swap3_lo(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000010
      - next_table: 0
      - set H2(0..15), swap3_lo_0$salu.WaterfallIngress.table_3_lo
      - swap3_lo_0$salu.WaterfallIngress.table_3_lo(table_3_lo_swap_0, $hash_dist)
      WaterfallIngress.lookup3_lo(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000011
      - next_table: 0
      - set ig_md.remain3_lo, hdr.ipv4.src_addr.0-15
      - set B4(1..4), swap3_lo_0$salu.WaterfallIngress.table_3_lo
      - swap3_lo_0$salu.WaterfallIngress.table_3_lo(table_3_lo_lookup_0, $hash_dist)
      WaterfallIngress.no_action(2, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000012
      - next_table: 0
    default_action: WaterfallIngress.no_action
  stateful swap3_lo_0$salu.WaterfallIngress.table_3_lo:
    p4: { name: WaterfallIngress.table_3_lo, size: 65536 }
    row: [ 15, 13 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 15
    input_xbar:
      exact group 0: { 64: ig_md.remain2_lo, 80: hdr.ipv4.src_addr.0-15 }
    data_bytemask: 15
    format: { lo: 16 }
    actions:
      table_3_lo_swap_0:
      - alu_a lo, phv_lo
      - output mem_lo
      table_3_lo_lookup_0:
      - equ lo, phv_hi, -lo
      - alu_a cmplo, hi, 3
      - output cmplo, alu_hi
stage 5 ingress:
  dependency: match
  exact_match swap4_hi_0 0:
    p4: { name: WaterfallIngress.swap4_hi, size: 512 }
    p4_param_order: 
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
      ig_md.found_hi: { type: exact, size: 4, full_size: 4 }
      ig_md.found_lo: { type: exact, size: 4, full_size: 4 }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - { group: 0, index: 0..9, select: 40..51 & 0x0, rams: [[7, 2]] }
    hash_dist:
      0: { hash: 1, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 1: ig_md.found_lo, 9: ig_md.found_hi, 15: ig_intr_md.resubmit_flag }
      hash 0:
        0..3: ig_md.found_lo
        4..7: ig_md.found_hi
        8: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
      exact group 0: { 64: ig_md.remain3_hi, 96: ig_md.remain3_lo }
      hash 1:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xfffff000, 0xffffffff, 32, { 0: ig_md.remain3_lo, 16: ig_md.remain3_hi }, { })), 0..15)
      hash group 1:
        table: [1]
        seed: 0xd12c
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 4..19, meter_pfe(0): 20..20, meter_type(0): 21..23, action(1): 2..3, version(1): 116..119, meter_addr(1): 24..39, meter_pfe(1): 40..40, meter_type(1): 41..43 }
    match_group_map: [ [ 0, 1 ] ]
    hit: [  swap4_lo_0 ]
    miss:  swap4_lo_0
    action_bus: { 32..33 : swap4_hi_0$salu.WaterfallIngress.table_4_hi(0..15) }
    stateful: swap4_hi_0$salu.WaterfallIngress.table_4_hi(hash_dist 0, meter_pfe, meter_type)
    instruction: swap4_hi_0(action, $DEFAULT)
    actions:
      WaterfallIngress.do_swap4_hi(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000013
      - next_table: 0
      - swap4_hi_0$salu.WaterfallIngress.table_4_hi(table_4_hi_swap_0, $hash_dist)
      WaterfallIngress.lookup4_hi(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000014
      - next_table: 0
      - set H0(9..12), swap4_hi_0$salu.WaterfallIngress.table_4_hi
      - swap4_hi_0$salu.WaterfallIngress.table_4_hi(table_4_hi_lookup_0, $hash_dist)
      WaterfallIngress.no_action(2, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000015
      - next_table: 0
    default_action: WaterfallIngress.no_action
  stateful swap4_hi_0$salu.WaterfallIngress.table_4_hi:
    p4: { name: WaterfallIngress.table_4_hi, size: 65536 }
    row: [ 15, 13 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 15
    input_xbar:
      exact group 0: { 64: ig_md.remain3_hi, 80: hdr.ipv4.src_addr.16-31 }
    data_bytemask: 15
    format: { lo: 16 }
    actions:
      table_4_hi_swap_0:
      - alu_a lo, phv_lo
      - output mem_lo
      table_4_hi_lookup_0:
      - equ lo, phv_hi, -lo
      - alu_a cmplo, hi, 4
      - output cmplo, alu_hi
stage 6 ingress:
  dependency: match
  exact_match swap4_lo_0 0:
    p4: { name: WaterfallIngress.swap4_lo, size: 512 }
    p4_param_order: 
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
      ig_md.found_hi: { type: exact, size: 4, full_size: 4 }
      ig_md.found_lo: { type: exact, size: 4, full_size: 4 }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - { group: 0, index: 0..9, select: 40..51 & 0x0, rams: [[7, 2]] }
    hash_dist:
      0: { hash: 1, mask: 0xffff, shift: 4 }
    input_xbar:
      exact group 0: { 1: ig_md.found_lo, 9: ig_md.found_hi, 15: ig_intr_md.resubmit_flag }
      hash 0:
        0..3: ig_md.found_lo
        4..7: ig_md.found_hi
        8: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
      exact group 0: { 64: ig_md.remain3_lo, 96: ig_md.remain3_hi }
      hash 1:
        0..15: slice(stripe(crc_rev(0x82608edb, 0xfffff000, 0xffffffff, 32, { 0: ig_md.remain3_lo, 16: ig_md.remain3_hi }, { })), 0..15)
      hash group 1:
        table: [1]
        seed: 0xd12c
    format: { action(0): 0..1, version(0): 112..115, meter_addr(0): 4..19, meter_pfe(0): 20..20, meter_type(0): 21..23, action(1): 2..3, version(1): 116..119, meter_addr(1): 24..39, meter_pfe(1): 40..40, meter_type(1): 41..43 }
    match_group_map: [ [ 0, 1 ] ]
    hit: [  resub_0 ]
    miss:  resub_0
    action_bus: { 0 : swap4_lo_0$salu.WaterfallIngress.table_4_lo(0..7) }
    stateful: swap4_lo_0$salu.WaterfallIngress.table_4_lo(hash_dist 0, meter_pfe, meter_type)
    instruction: swap4_lo_0(action, $DEFAULT)
    actions:
      WaterfallIngress.do_swap4_lo(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000016
      - next_table: 0
      - swap4_lo_0$salu.WaterfallIngress.table_4_lo(table_4_lo_swap_0, $hash_dist)
      WaterfallIngress.lookup4_lo(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000017
      - next_table: 0
      - set B4(1..4), swap4_lo_0$salu.WaterfallIngress.table_4_lo
      - swap4_lo_0$salu.WaterfallIngress.table_4_lo(table_4_lo_lookup_0, $hash_dist)
      WaterfallIngress.no_action(2, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000018
      - next_table: 0
    default_action: WaterfallIngress.no_action
  stateful swap4_lo_0$salu.WaterfallIngress.table_4_lo:
    p4: { name: WaterfallIngress.table_4_lo, size: 65536 }
    row: [ 15, 13 ]
    logical_bus: [ S, O ]
    column:
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    maprams: 
    - [ 0, 1, 2, 3, 4, 5 ]
    - [ 0, 1, 2 ]
    home_row: 15
    input_xbar:
      exact group 0: { 64: ig_md.remain3_lo, 80: hdr.ipv4.src_addr.0-15 }
    data_bytemask: 15
    format: { lo: 16 }
    actions:
      table_4_lo_swap_0:
      - alu_a lo, phv_lo
      - output mem_lo
      table_4_lo_lookup_0:
      - equ lo, phv_hi, -lo
      - alu_a cmplo, hi, 4
      - output cmplo, alu_hi
stage 7 ingress:
  dependency: match
  exact_match resub_0 0:
    p4: { name: WaterfallIngress.resub, size: 512 }
    p4_param_order: 
      ig_md.found_hi: { type: exact, size: 4, full_size: 4 }
      ig_md.found_lo: { type: exact, size: 4, full_size: 4 }
      ig_intr_md.resubmit_flag: { type: exact, size: 1, full_size: 1 }
    row: 7
    bus: 0
    column: 2
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - { group: 0, index: 0..9, select: 40..51 & 0x0, rams: [[7, 2]] }
    input_xbar:
      exact group 0: { 1: ig_md.found_lo, 9: ig_md.found_hi, 15: ig_intr_md.resubmit_flag }
      hash 0:
        0..3: ig_md.found_lo
        4..7: ig_md.found_hi
        8: ig_intr_md.resubmit_flag
      hash group 0:
        table: [0]
        seed: 0x0
    format: { action(0): 0..0, version(0): 112..115, action(1): 1..1, version(1): 116..119, action(2): 2..2, version(2): 120..123, action(3): 3..3, version(3): 124..127, action(4): 4..4, version(4): 8..11 }
    match_group_map: [ [ 0, 1, 2, 3, 4 ] ]
    hit: [  END ]
    miss:  END
    instruction: resub_0(action, $DEFAULT)
    actions:
      WaterfallIngress.resubmit_hdr(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000019
      - next_table: 0
      - set ig_md.resubmit_md.remain_hi, hdr.ipv4.src_addr.16-31
      - set ig_md.resubmit_md.remain_lo, hdr.ipv4.src_addr.0-15
      - set ig_md.resubmit_md.type, 3
      - set ig_intr_md_for_dprsr.resubmit_type, 3
      - set ig_intr_md_for_dprsr.digest_type, 5
      WaterfallIngress.no_resubmit(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000001a
      - next_table: 0
      - set ig_md.resubmit_md.remain_hi, 0
      - set ig_md.resubmit_md.remain_lo, 0
      - set ig_md.resubmit_md.type, 0
      - set ig_intr_md_for_dprsr.resubmit_type, 0
      - set ig_intr_md_for_dprsr.digest_type, 0
    default_action: WaterfallIngress.no_resubmit


primitives: "waterfall.prim.json"
dynhash: "waterfall.dynhash.json"
